        public void GPP_TC_DMV_ACCOUNTS_VALIDATION()
        {
            Reports.TestDescription = "Verify a User can create Account Alias.";
            string filepath = Reports.DEPLOYDIR + "\\" + "DMV_Account_Validation_Data.xlsx";
            try
            {
                // Read Excel sheet 
                List<AccountDmvDataModel> dataset = PageOperations.GPPAccountSetupOperation.ReadExcel(filepath);

                // Start the Web Driver.
                FATrustDrivers.StartWebDriver();

                // As a Primary Agent Login to Application 
                Reports.TestStep = "Login to GPP Application.";
                PageOperations.GPPLoginPageOperations.OpenGPP(AutoConfig.GPPUrl);
                PageOperations.GPPLoginPageOperations.LoginToGPP(AutoConfig.GPPUserName, AutoConfig.GPPPassword);

                Reports.TestStep = "Navigate from Business Setup Page to Account Alias Page";
                PageOperations.GPPBusinessSetupOperations.NavigateToBusinessSetupPage();
                PageOperations.GPPBusinessSetupOperations.NavigateToBusinessEntitiesAccountsPage();
                PageOperations.GPPBusinessSetupOperations.FilterAccountType();
                List<AccountDmvDataModel> accountDMV = new List<AccountDmvDataModel>();
                for(int rowNumber = 1; rowNumber < dataset.Count; rowNumber++)
                {
                    bool account_Exists = PageOperations.GPPBusinessSetupOperations.VerifyAccountsExists(dataset[rowNumber].ACC_NO);
                    dataset[rowNumber].IS_RECORD_EXIST = account_Exists ? "PASS" : "FAIL";
                    if (dataset[rowNumber].IS_RECORD_EXIST.Equals("PASS"))
                    {
                        AccountDmvDataModel currentDataModel = dataset[rowNumber];
                        Url_AccountsSearch_Page = PageOperations.GPPMessageCenterOperations.FetchCurrentURLFromMessageCentreSearchPage();
                        PageOperations.GPPTransactionDataFullViewOperations.SwitchToTransactionDataPageInFullView(WindowTitle, Url_Accounts_Page);
                        var result = PageOperations.GPPAccountSetupOperation.CompareData(currentDataModel,rowNumber);
                        accountDMV.Add(result);
                        PageOperations.GPPTransactionDataFullViewOperations.SwitchBackToMessageCenterSearchPage(Url_AccountsSearch_Page);
                    }
                    PageOperations.GPPAccountSetupOperation.ClearAccountFilter();
                    Console.WriteLine("row"+rowNumber+" " +dataset[rowNumber]);
                    LogWriter logWriter = new LogWriter("C:\\Work\\Git\\6-Jun-2024\\DMV activity\\GPP\\log.txt");
                    logWriter.WriteLog("This is a log message." + dataset[rowNumber].ACC_NO);
                    logWriter.WriteLog("This is a log message." + dataset[rowNumber].IS_RECORD_EXIST);
                }

                Reports.TestStep = "As an Agent Logout from the application";
                PageOperations.GPPMessageCenterOperations.Logout();

                Reports.TestStep = "Save output excel";
                // PageOperations.GPPAccountSetupOperation.GenerateUIValidationReport();

                Reports.TestStep = "Quit and Close the WebBrowser";
                FATrustDrivers.QuitWebDriver();
            }
            catch (Exception ex)
            {
                FailTest(ex.Message);
            }
        }
    }
}

public AccountDmvDataModel CompareData(AccountDmvDataModel dataModel, int rowNumber)
{
    List<ResultModel> results = new List<ResultModel>();
    var res = new AccountDmvDataModel();
    Dictionary<string, string> columnResult = new Dictionary<string, string>();
    try
    {
        if (dataModel != null)
        {
            // Navigating and validating general tab fields
            this.tab_General.Click();
            results.Add(this.ValidateData("ACC_TYPE", dataModel.ACC_TYPE, txt_ACC_TYPE, false, true));
            columnResult["ACC_TYPE"] = results[results.Count - 1].ResultLog;

            results.Add(ValidateData("ACC_NO", dataModel.ACC_NO, txt_ACC_NO, false, true));
            columnResult["ACC_NO"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("CUST_CODE", dataModel.CUST_CODE, txt_CUST_CODE, false, true));
            columnResult["CUST_CODE"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("CURRENCY", dataModel.CURRENCY, txt_CURRENCY, false, true));
            columnResult["CURRENCY"] = results[results.Count - 1].ResultLog;

            results.Add(ValidateData("ACCOUNTNAME", dataModel.ACCOUNTNAME, txt_ACCOUNTNAME, false, true));
            columnResult["ACCOUNTNAME"] = results[results.Count - 1].ResultLog;

            // Navigating and validating contact information tab fields
            tab_Contact_Information.Click();
            results.Add(this.ValidateData("Address1", dataModel.Address1, txt_Address1, false, true));
            columnResult["Address1"] = results[results.Count - 1].ResultLog;

            results.Add(ValidateData("Address2", dataModel.Address2, txt_Address2, false, true));
            columnResult["Address2"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("Address3", dataModel.Address3, txt_Address3, false, true));
            columnResult["Address3"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("LOCATION", dataModel.LOCATION, txt_LOCATION, false, true));
            columnResult["LOCATION"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("NET_ADDR", dataModel.NET_ADDR, txt_NET_ADDR, false, true));
            columnResult["NET_ADDR"] = results[results.Count - 1].ResultLog;

            results.Add(ValidateData("PHONE", dataModel.PHONE, txt_PHONE, false, true));
            columnResult["PHONE"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("FAX", dataModel.FAX, txt_FAX, false, true));
            columnResult["FAX"] = results[results.Count - 1].ResultLog;

            // Switch back to general tab for more validations
            tab_General.Click();
            results.Add(this.ValidateData("CONSUMER", dataModel.CONSUMER, chkbx_CONSUMER, true, false));
            columnResult["CONSUMER"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("DEPARTMENT", dataModel.DEPARTMENT, txt_DEPARTMENT, false, true));
            columnResult["DEPARTMENT"] = results[results.Count - 1].ResultLog;

            // Switch to preferences tab for validations
            tab_Preference.Click();
            results.Add(this.ValidateData("COST_CTR", dataModel.COST_CTR, txt_COST_CTR, false, true));
            columnResult["COST_CTR"] = results[results.Count - 1].ResultLog;

            // Switch back to general tab for more validations
            tab_General.Click();
            results.Add(ValidateData("STOPFLAGDR", dataModel.STOPFLAGDR, chkbx_STOPFLAGDR, true, false));
            columnResult["STOPFLAGDR"] = results[results.Count - 1].ResultLog;

            results.Add(ValidateData("REASONDR", dataModel.REASONDR, txt_REASONDR, false, true));
            columnResult["REASONDR"] = results[results.Count - 1].ResultLog;

            results.Add(ValidateData("STOPFLAGCR", dataModel.STOPFLAGCR, chkbx_STOPFLAGCR, true, false));
            columnResult["STOPFLAGCR"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("REASONCR", dataModel.REASONCR, txt_REASONCR, false, true));
            columnResult["REASONCR"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("EFFECTIVE_DATE", dataModel.EFFECTIVE_DATE, txt_EFFECTIVE_DATE, false, true));
            columnResult["EFFECTIVE_DATE"] = results[results.Count - 1].ResultLog;

            results.Add(ValidateData("ACCOUNT_OWNER_NAME", dataModel.ACCOUNT_OWNER_NAME, txt_ACCOUNT_OWNER_NAME, false, true));
            columnResult["ACCOUNT_OWNER_NAME"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("REC_STATUS", dataModel.REC_STATUS, txt_REC_STATUS, false, true));
            columnResult["REC_STATUS"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("BOOKNG_ENT", dataModel.BOOKNG_ENT, txt_BOOKNG_ENT, false, true));
            columnResult["BOOKNG_ENT"] = results[results.Count - 1].ResultLog;

            this.tab_Preference.Click();
            results.Add(this.ValidateData("CDB_CHCK_DBT_IND", dataModel.CDB_CHCK_DBT_IND, chkbx_CDB_CHCK_DBT_IND, true, false));
            columnResult["CDB_CHCK_DBT_IND"] = results[results.Count - 1].ResultLog;
            results.Add(this.ValidateData("CDB_CHCK_CDT_IND", dataModel.CDB_CHCK_CDT_IND, chkbx_CDB_CHCK_CDT_IND, true, false));
            columnResult["CDB_CHCK_CDT_IND"] = results[results.Count - 1].ResultLog;
            results.Add(this.ValidateData("CATEGORY_LIST", dataModel.CATEGORY_LIST, txt_CATEGORY_LIST, false, true));
            columnResult["CATEGORY_LIST"] = results[results.Count - 1].ResultLog;

            this.tab_Accounting_and_Fees.Click();
            results.Add(this.ValidateData("DEBIT_CONVERSION", dataModel.DEBIT_CONVERSION, chkbx_DEBIT_CONVERSION, true, false));
            columnResult["DEBIT_CONVERSION"] = results[results.Count - 1].ResultLog;
            results.Add(ValidateData("CREDIT_CONVERSION", dataModel.CREDIT_CONVERSION, chkbx_CREDIT_CONVERSION, true, false));
            columnResult["CREDIT_CONVERSION"] = results[results.Count - 1].ResultLog;

            this.tab_General.Click();
            results.Add(this.ValidateData("EXT_AGREEMENT_IND", dataModel.EXT_AGREEMENT_IND, chkbx_EXT_AGREEMENT_IND, true, false));
            columnResult["EXT_AGREEMENT_IND"] = results[results.Count - 1].ResultLog;
            results.Add(this.ValidateData("EXT_AGREEMENT_START_DT", dataModel.EXT_AGREEMENT_START_DT, txt_EXT_AGREEMENT_START_DT, false, true));
            columnResult["EXT_AGREEMENT_START_DT"] = results[results.Count - 1].ResultLog;
            results.Add(this.ValidateData("EXT_AGREEMENT_END_DT", dataModel.EXT_AGREEMENT_END_DT, txt_EXT_AGREEMENT_END_DT, false, true));
            columnResult["EXT_AGREEMENT_END_DT"] = results[results.Count - 1].ResultLog;

            this.tab_Preference.Click();
            results.Add(this.ValidateData("BALANCE_AND_ACOUNT_IND", dataModel.BALANCE_AND_ACOUNT_IND, chkbx_BALANCE_AND_ACOUNT_IND, true, false));
            columnResult["BALANCE_AND_ACOUNT_IND"] = results[results.Count - 1].ResultLog;

            this.tab_Contact_Information.Click();
            results.Add(this.ValidateData("COUNTRYCODE", dataModel.COUNTRYCODE, txt_COUNTRYCODE, false, true));
            columnResult["COUNTRYCODE"] = results[results.Count - 1].ResultLog;
            results.Add(this.ValidateData("BRANCHCODE", dataModel.BRANCHCODE, txt_BRANCHCODE, false, true));
            columnResult["BRANCHCODE"] = results[results.Count - 1].ResultLog;

            this.tab_Preference.Click();
            results.Add(this.ValidateData("ACC_SERVICING_INSTITUTION", dataModel.ACC_SERVICING_INSTITUTION, txt_ACC_SERVICING_INSTITUTION, false, true));
            columnResult["ACC_SERVICING_INSTITUTION"] = results[results.Count - 1].ResultLog;
            results.Add(this.ValidateData("PROD_CAT_CODE", dataModel.PROD_CAT_CODE, txt_PROD_CAT_CODE, false, true));
            columnResult["PROD_CAT_CODE"] = results[results.Count - 1].ResultLog;

            columnResult["OVERALL_RESULT"] = (results.All(items => items.IsMatched)) ? "PASS" : "FAIL";

            // Map dictionary values to the properties of AccountDmvDataModel
            if (columnResult.ContainsKey("ACC_TYPE")) res.ACC_TYPE = columnResult["ACC_TYPE"];
            if (columnResult.ContainsKey("ACC_NO")) res.ACC_NO = columnResult["ACC_NO"];
            if (columnResult.ContainsKey("CUST_CODE")) res.CUST_CODE = columnResult["CUST_CODE"];
            if (columnResult.ContainsKey("CURRENCY")) res.CURRENCY = columnResult["CURRENCY"];
            if (columnResult.ContainsKey("ACCOUNTNAME")) res.ACCOUNTNAME = columnResult["ACCOUNTNAME"];
            if (columnResult.ContainsKey("Address1")) res.Address1 = columnResult["Address1"];
            if (columnResult.ContainsKey("Address2")) res.Address2 = columnResult["Address2"];
            if (columnResult.ContainsKey("Address3")) res.Address3 = columnResult["Address3"];
            if (columnResult.ContainsKey("LOCATION")) res.LOCATION = columnResult["LOCATION"];
            if (columnResult.ContainsKey("NET_ADDR")) res.NET_ADDR = columnResult["NET_ADDR"];
            if (columnResult.ContainsKey("PHONE")) res.PHONE = columnResult["PHONE"];
            if (columnResult.ContainsKey("FAX")) res.FAX = columnResult["FAX"];
            if (columnResult.ContainsKey("CONSUMER")) res.CONSUMER = columnResult["CONSUMER"];
            if (columnResult.ContainsKey("DEPARTMENT")) res.DEPARTMENT = columnResult["DEPARTMENT"];
            if (columnResult.ContainsKey("COST_CTR")) res.COST_CTR = columnResult["COST_CTR"];
            if (columnResult.ContainsKey("STOPFLAGDR")) res.STOPFLAGDR = columnResult["STOPFLAGDR"];
            if (columnResult.ContainsKey("REASONDR")) res.REASONDR = columnResult["REASONDR"];
            if (columnResult.ContainsKey("STOPFLAGCR")) res.STOPFLAGCR = columnResult["STOPFLAGCR"];
            if (columnResult.ContainsKey("REASONCR")) res.REASONCR = columnResult["REASONCR"];
            if (columnResult.ContainsKey("EFFECTIVE_DATE")) res.EFFECTIVE_DATE = columnResult["EFFECTIVE_DATE"];
            if (columnResult.ContainsKey("ACCOUNT_OWNER_NAME")) res.ACCOUNT_OWNER_NAME = columnResult["ACCOUNT_OWNER_NAME"];
            if (columnResult.ContainsKey("REC_STATUS")) res.REC_STATUS = columnResult["REC_STATUS"];
            if (columnResult.ContainsKey("BOOKNG_ENT")) res.BOOKNG_ENT = columnResult["BOOKNG_ENT"];
            if (columnResult.ContainsKey("CDB_CHCK_DBT_IND")) res.CDB_CHCK_DBT_IND = columnResult["CDB_CHCK_DBT_IND"];
            if (columnResult.ContainsKey("CDB_CHCK_CDT_IND")) res.CDB_CHCK_CDT_IND = columnResult["CDB_CHCK_CDT_IND"];
            if (columnResult.ContainsKey("CATEGORY_LIST")) res.CATEGORY_LIST = columnResult["CATEGORY_LIST"];
            if (columnResult.ContainsKey("DEBIT_CONVERSION")) res.DEBIT_CONVERSION = columnResult["DEBIT_CONVERSION"];
            if (columnResult.ContainsKey("CREDIT_CONVERSION")) res.CREDIT_CONVERSION = columnResult["CREDIT_CONVERSION"];
            if (columnResult.ContainsKey("EXT_AGREEMENT_IND")) res.EXT_AGREEMENT_IND = columnResult["EXT_AGREEMENT_IND"];
            if (columnResult.ContainsKey("EXT_AGREEMENT_START_DT")) res.EXT_AGREEMENT_START_DT = columnResult["EXT_AGREEMENT_START_DT"];
            if (columnResult.ContainsKey("EXT_AGREEMENT_END_DT")) res.EXT_AGREEMENT_END_DT = columnResult["EXT_AGREEMENT_END_DT"];
            if (columnResult.ContainsKey("BALANCE_AND_ACOUNT_IND")) res.BALANCE_AND_ACOUNT_IND = columnResult["BALANCE_AND_ACOUNT_IND"];
            if (columnResult.ContainsKey("COUNTRYCODE")) res.COUNTRYCODE = columnResult["COUNTRYCODE"];
            if (columnResult.ContainsKey("BRANCHCODE")) res.BRANCHCODE = columnResult["BRANCHCODE"];
            if (columnResult.ContainsKey("ACC_SERVICING_INSTITUTION")) res.ACC_SERVICING_INSTITUTION = columnResult["ACC_SERVICING_INSTITUTION"];
            if (columnResult.ContainsKey("PROD_CAT_CODE")) res.PROD_CAT_CODE = columnResult["PROD_CAT_CODE"];
            if (columnResult.ContainsKey("OVERALL_RESULT")) res.OVERALL_RESULT = columnResult["OVERALL_RESULT"];

            // Update the result model with column result data
            foreach (var result in columnResult)
            {
                if (string.IsNullOrEmpty(result.Value))
                {
                    if (result.Key != "OVERALL_RESULT")
                    {
                        columnResult[result.Key] = "N/A";
                    }
                    else
                    {
                        columnResult["OVERALL_RESULT"] = "FAIL";
                    }
                }
                var property = res.GetType().GetProperty(result.Key);
                if (property != null && property.CanWrite)
                {
                    property.SetValue(res, result.Value);
                }
            }

            bool allValluesNA = columnResult.All(items => items.Value == "N/A");
            if (allValluesNA)
            {
                columnResult["Comments"] = "Data missing;";
            }
            if (!columnResult.ContainsKey("Comments"))
            {
                columnResult.Add("Comments", "");
            }
            // Generate the Excel report
            GenerateExcelReport(rowNumber, dataModel, columnResult);
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Issue in Comparing Data" +ex.Message);
    }
    finally
    {
        this.btn_CloseAccountWindow.FATClick();
    }
    return res;
}

public static void GenerateExcelReport(int rowNumber, AccountDmvDataModel dataModel, Dictionary<string, string> columnResult)
{
    string workingDiectory = Directory.GetCurrentDirectory();
    string accountReports = Path.Combine(workingDiectory, "Accounts");

    try
    {
        // Ensure directory exists
        string directory = Path.Combine(accountReports);
        if (!Directory.Exists(accountReports))
        {
            Directory.CreateDirectory(accountReports);
        }
        string filePath = Path.Combine(accountReports, "Account_OutputFile.xlsx");

        FileInfo fileInfo = new FileInfo(filePath);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        // Use the `using` statement to ensure proper disposal
        using (ExcelPackage package = new ExcelPackage(fileInfo))
        {
            // Load or create the worksheet
            ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Results");

            // Add headers if the worksheet is empty
            if (worksheet.Dimension == null)
            {
                int columnIndex = 1;
                if (dataModel != null)
                {

                    // Add headers based on columnResult
                    foreach (var field in dataModel.GetType().GetProperties())
                    {
                        if (field.Name != "IS_RECORD_EXIST")
                        {
                            if (field.Name == "OVERALL_RESULT")
                            {
                                worksheet.Cells[1, columnIndex].Value = "OVERALL_RESULT";
                                columnIndex++;
                            }
                            else
                            {
                                worksheet.Cells[1, columnIndex].Value = field.Name + " - ExcelFile";
                                worksheet.Cells[1, columnIndex + 1].Value = field.Name + " - Accounts_UI";
                                columnIndex += 2;
                            }
                        }
                    }
                    worksheet.Cells[1, columnIndex++].Value = "COMMENT";
                }
            }

            // Find the next row to write data
            int nextRow = worksheet.Dimension?.End.Row + 1 ?? 2;

            // Populate row data                    
            int currentColumn = 1;

            // If columnResult is null, populate row with dataModel values as expected, and "N/A" as actual
            if (columnResult == null && dataModel != null)
            {
                // Populate "Expected" values from dataModel and "Actual" values as "N/A"
                foreach (var prop in dataModel.GetType().GetProperties())
                {
                    var expectedValue = prop.GetValue(dataModel, null)?.ToString() ?? "N/A"; // Expected value from dataModel
                    var actualValue = "N/A"; // Actual value is always N/A since data is missing

                    if (prop.Name == "OVERALL_RESULT")
                    {
                        worksheet.Cells[nextRow, currentColumn].Value = "FAIL";
                        currentColumn++;
                    }
                    else
                    {
                        if (prop.Name != "IS_RECORD_EXIST" && prop.Name != "OVERALL_RESULT")
                        {
                            worksheet.Cells[nextRow, currentColumn].Value = expectedValue;  // Expected value
                            worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue; // Actual value as N/A
                            currentColumn += 2;
                        }
                    }
                }

                // Add comment 
                worksheet.Cells[nextRow, currentColumn++].Value = "Data Missing"; // COMMENT


            }
            else if (columnResult != null)
            {
                // Populate row with columnResult values when available
                foreach (var field in columnResult)
                {
                    var fieldName = field.Key;
                    var expectedValue = dataModel?.GetType().GetProperty(fieldName)?.GetValue(dataModel, null)?.ToString();
                    var actualValue = GetFieldValue(fieldName, field.Value);

                    // Handle date formatting if needed
                    if (fieldName == "EFFECTIVE_DATE")
                    {
                        if (DateTime.TryParse(expectedValue, out DateTime expectedDate))
                        {
                            expectedValue = expectedDate.ToString("MM/dd/yyyy");
                        }
                        if (DateTime.TryParse(actualValue, out DateTime actualDate))
                        {
                            actualValue = actualDate.ToString("MM/dd/yyyy");
                        }
                    }
                    if (fieldName == "OVERALL_RESULT")
                    {
                        if (actualValue == "FAIL")
                        {
                            string accountNo = dataModel.ACC_NO;
                            CaptureScreenshot(accountNo);
                            worksheet.Cells[nextRow, currentColumn].Value = actualValue;
                            currentColumn++;
                        }
                        else
                        {
                            worksheet.Cells[nextRow, currentColumn].Value = actualValue;
                            currentColumn++;
                        }
                    }
                    else
                    {
                        worksheet.Cells[nextRow, currentColumn].Value = expectedValue;
                        worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue;
                        currentColumn += 2;
                    }
                }
            }
            // Save the Excel file
            package.Save();
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to generate Excel report: " + ex.Message);
    }
}

private static string GetFieldValue(string fieldName, string fieldvalue)
{
    switch (fieldName)
    {
        case "ACC_TYPE":
            return txt_ACC_TYPE.GetAttribute("value");
        case "ACC_NO":
            return txt_ACC_NO.GetAttribute("value");
        case "CUST_CODE":
            return txt_CUST_CODE.GetAttribute("value");
        case "CURRENCY":
            return txt_CURRENCY.GetAttribute("value");
        case "ACCOUNTNAME":
            return txt_ACCOUNTNAME.GetAttribute("value");
        case "Address1":
            return txt_Address1.GetAttribute("value");
        case "Address2":
            return txt_Address2.GetAttribute("value");
        case "Address3":
            return txt_Address3.GetAttribute("value");
        case "LOCATION":
            return txt_LOCATION.GetAttribute("value");
        case "NET_ADDR":
            return txt_NET_ADDR.GetAttribute("value");
        case "PHONE":
            return txt_PHONE.GetAttribute("value");
        case "FAX":
            return txt_FAX.GetAttribute("value");
        case "CONSUMER":
            return chkbx_CONSUMER.Selected ? "1" : "0";
        case "DEPARTMENT":
            return txt_DEPARTMENT.GetAttribute("value");
        case "COST_CTR":
            return txt_COST_CTR.GetAttribute("value");
        case "STOPFLAGDR":
            return chkbx_STOPFLAGDR.Selected ? "1" : "0";
        case "REASONDR":
            return txt_REASONDR.GetAttribute("value");
        case "STOPFLAGCR":
            return chkbx_STOPFLAGCR.Selected ? "1" : "0";
        case "REASONCR":
            return txt_REASONCR.GetAttribute("value");
        case "EFFECTIVE_DATE":
            return txt_EFFECTIVE_DATE.GetAttribute("value");
        case "ACCOUNT_OWNER_NAME":
            return txt_ACCOUNT_OWNER_NAME.GetAttribute("value");
        case "REC_STATUS":
            return txt_REC_STATUS.GetAttribute("value");
        case "BOOKNG_ENT":
            return txt_BOOKNG_ENT.GetAttribute("value");
        case "CDB_CHCK_DBT_IND":
            return chkbx_CDB_CHCK_DBT_IND.Selected ? "1" : "0";
        case "CDB_CHCK_CDT_IND":
            return chkbx_CDB_CHCK_CDT_IND.Selected ? "1" : "0";
        case "CATEGORY_LIST":
            return txt_CATEGORY_LIST.GetAttribute("value");
        case "DEBIT_CONVERSION":
            return chkbx_DEBIT_CONVERSION.Selected ? "1" : "0";
        case "CREDIT_CONVERSION":
            return chkbx_CREDIT_CONVERSION.Selected ? "1" : "0";
        case "EXT_AGREEMENT_IND":
            return chkbx_EXT_AGREEMENT_IND.Selected ? "1" : "0";
        case "EXT_AGREEMENT_START_DT":
            return txt_EXT_AGREEMENT_START_DT.GetAttribute("value");
        case "EXT_AGREEMENT_END_DT":
            return txt_EXT_AGREEMENT_END_DT.GetAttribute("value");
        case "BALANCE_AND_ACOUNT_IND":
            return chkbx_BALANCE_AND_ACOUNT_IND.Selected ? "1" : "0";
        case "COUNTRYCODE":
            return txt_COUNTRYCODE.GetAttribute("value");
        case "BRANCHCODE":
            return txt_BRANCHCODE.GetAttribute("value");
        case "ACC_SERVICING_INSTITUTION":
            return txt_ACC_SERVICING_INSTITUTION.GetAttribute("value");
        case "PROD_CAT_CODE":
            return txt_PROD_CAT_CODE.GetAttribute("value");
        // Default case
        case "OVERALL_RESULT":
            return fieldvalue;
        default:
            return " ";
    }
}
