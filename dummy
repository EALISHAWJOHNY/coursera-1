private void GenerateExcelReport(int rowNumber, AccountDmvDataModel dataModel, Dictionary<string, string> columnResult)
{
    string filePath = @"C:\src\GPP_DMV\GPP\OutputFile.xlsx";

    try
    {
        // Ensure directory exists
        string directory = Path.GetDirectoryName(filePath);
        if (!Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        FileInfo fileInfo = new FileInfo(filePath);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        // Use the `using` statement to ensure proper disposal
        using (ExcelPackage package = new ExcelPackage(fileInfo))
        {
            // Load or create the worksheet
            ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Results");

            // Add headers if the worksheet is empty
            if (worksheet.Dimension == null)
            {
                worksheet.Cells[1, 1].Value = "Row Number";
                int columnIndex = 2;

                foreach (var field in columnResult.Keys)
                {
                    // If the field is OVERALL_RESULT, only add a single column
                    if (field == "OVERALL_RESULT")
                    {
                        worksheet.Cells[1, columnIndex].Value = "OVERALL_RESULT";
                        columnIndex++;
                    }
                    else
                    {
                        worksheet.Cells[1, columnIndex].Value = field + " - Expected";
                        worksheet.Cells[1, columnIndex + 1].Value = field + " - Actual";
                        columnIndex += 2;
                    }
                }
            }

            // Find the next row to write data
            int nextRow = worksheet.Dimension?.End.Row + 1 ?? 2;
            worksheet.Cells[nextRow, 1].Value = rowNumber;

            // Populate row data
            int currentColumn = 2;
            foreach (var field in columnResult)
            {
                var fieldName = field.Key;
                var expectedValue = dataModel.GetType().GetProperty(fieldName)?.GetValue(dataModel, null)?.ToString() ?? "N/A";
                var actualValue = GetFieldValue(fieldName, field.Value);

                // If the field is OVERALL_RESULT, only write the actual value and skip expected
                if (fieldName == "OVERALL_RESULT")
                {
                    worksheet.Cells[nextRow, currentColumn].Value = actualValue;
                    currentColumn++;
                }
                else
                {
                    worksheet.Cells[nextRow, currentColumn].Value = expectedValue;
                    worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue;
                    currentColumn += 2;
                }
            }

            // Delete the "OVERALL_RESULT - Expected" column (assuming it's in column 74)
            worksheet.DeleteColumn(74);

            // Rename "OVERALL_RESULT - Actual" to "OVERALL_RESULT" in the header
            worksheet.Cells[1, 74].Value = "OVERALL_RESULT";

            // Save the Excel file
            package.Save();
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to generate Excel report: " + ex.Message);
    }
}
