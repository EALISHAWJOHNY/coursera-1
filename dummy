public void GenerateExcelReport(int rowNumber, AccountDmvDataModel dataModel, Dictionary<string, string> columnResult)
{
    string workingDirectory = Directory.GetCurrentDirectory();
    string accountReports = Path.Combine(workingDirectory, "Accounts");

    try
    {
        // Ensure directory exists
        if (!Directory.Exists(accountReports))
        {
            Directory.CreateDirectory(accountReports);
        }

        string filePath = Path.Combine(accountReports, "Account_OutputFile.xlsx");
        FileInfo fileInfo = new FileInfo(filePath);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (ExcelPackage package = new ExcelPackage(fileInfo))
        {
            // Load or create the worksheet
            ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Results");

            // Add headers if the worksheet is empty
            if (worksheet.Dimension == null)
            {
                int columnIndex = 1;
                if (columnResult != null && columnResult.Keys.Count > 0)
                {
                    // Add headers based on columnResult
                    foreach (var field in columnResult.Keys)
                    {
                        if (field == "OVERALL_RESULT")
                        {
                            worksheet.Cells[1, columnIndex].Value = "OVERALL_RESULT";
                            columnIndex++;
                        }
                        else
                        {
                            worksheet.Cells[1, columnIndex].Value = field + " - ExcelFile";
                            worksheet.Cells[1, columnIndex + 1].Value = field + " - Accounts_UI";
                            columnIndex += 2;
                        }
                    }
                    worksheet.Cells[1, columnIndex].Value = "COMMENT"; // Add comment column header
                }
                else
                {
                    // Default headers for when columnResult is null
                    worksheet.Cells[1, 1].Value = "ACC_NO";
                    worksheet.Cells[1, 2].Value = "Data ExcelFile";
                    worksheet.Cells[1, 3].Value = "Data Accounts_UI";
                    worksheet.Cells[1, 4].Value = "COMMENT";
                    worksheet.Cells[1, 5].Value = "OVERALL_RESULT";
                }
            }

            // Find the next row to write data
            int nextRow = worksheet.Dimension?.End.Row + 1 ?? 2;

            // Populate row with "N/A" if columnResult is null
            int currentColumn = 1;

            if (columnResult == null)
            {
                // If columnResult is null, fill every expected column with "N/A"
                int totalColumns = worksheet.Dimension.End.Column; // Get total number of columns
                worksheet.Cells[nextRow, 1].Value = dataModel?.ACC_NO ?? "N/A"; // ACC_NO

                for (int i = 2; i <= totalColumns; i++)
                {
                    if (i == totalColumns - 1) // Second last column for comment
                    {
                        worksheet.Cells[nextRow, i].Value = "Data Missing";
                    }
                    else if (i == totalColumns) // Last column for overall result
                    {
                        worksheet.Cells[nextRow, i].Value = "FAIL";
                    }
                    else
                    {
                        worksheet.Cells[nextRow, i].Value = "N/A";
                    }
                }
            }
            else
            {
                // Populate row data when columnResult is available
                foreach (var field in columnResult)
                {
                    var fieldName = field.Key;
                    var expectedValue = dataModel?.GetType().GetProperty(fieldName)?.GetValue(dataModel, null)?.ToString() ?? "N/A";
                    var actualValue = field.Value ?? "N/A";

                    // Format date field if needed
                    if (fieldName == "EFFECTIVE_DATE")
                    {
                        if (DateTime.TryParse(expectedValue, out DateTime expectedDate))
                        {
                            expectedValue = expectedDate.ToString("MM/dd/yyyy");
                        }
                        if (DateTime.TryParse(actualValue, out DateTime actualDate))
                        {
                            actualValue = actualDate.ToString("MM/dd/yyyy");
                        }
                    }

                    // Write the values to the Excel file
                    worksheet.Cells[nextRow, currentColumn++].Value = expectedValue;
                    worksheet.Cells[nextRow, currentColumn++].Value = actualValue;
                }

                // Add comment and overall result columns
                worksheet.Cells[nextRow, currentColumn++].Value = "Data Verified";
                worksheet.Cells[nextRow, currentColumn].Value = "PASS";
            }

            // Save the Excel file
            package.Save();
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to generate Excel report: " + ex.Message);
    }
}
