public AccountDmvDataModel CompareData(AccountDmvDataModel dataModel, int rowNumber)
{
    List<ResultModel> results = new List<ResultModel>();
    var res = new AccountDmvDataModel();
    Dictionary<string, string> columnResult = new Dictionary<string, string>();
    try
    {
        if (dataModel != null)
        {
            // Navigating and validating general tab fields
            this.tab_General.Click();
            results.Add(this.ValidateData("ACC_TYPE", dataModel.ACC_TYPE, this.txt_ACC_TYPE, false, true));
            columnResult["ACC_TYPE"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("ACC_NO", dataModel.ACC_NO, this.txt_ACC_NO, false, true));
            columnResult["ACC_NO"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("CUST_CODE", dataModel.CUST_CODE, this.txt_CUST_CODE, false, true));
            columnResult["CUST_CODE"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("CURRENCY", dataModel.CURRENCY, this.txt_CURRENCY, false, true));
            columnResult["CURRENCY"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("ACCOUNTNAME", dataModel.ACCOUNTNAME, this.txt_ACCOUNTNAME, false, true));
            columnResult["ACCOUNTNAME"] = results[results.Count - 1].ResultLog;

            // Navigating and validating contact information tab fields
            this.tab_Contact_Information.Click();
            results.Add(this.ValidateData("Address1", dataModel.Address1, this.txt_Address1, false, true));
            columnResult["Address1"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("Address2", dataModel.Address2, this.txt_Address2, false, true));
            columnResult["Address2"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("Address3", dataModel.Address3, this.txt_Address3, false, true));
            columnResult["Address3"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("LOCATION", dataModel.LOCATION, this.txt_LOCATION, false, true));
            columnResult["LOCATION"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("NET_ADDR", dataModel.NET_ADDR, this.txt_NET_ADDR, false, true));
            columnResult["NET_ADDR"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("PHONE", dataModel.PHONE, this.txt_PHONE, false, true));
            columnResult["PHONE"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("FAX", dataModel.FAX, this.txt_FAX, false, true));
            columnResult["FAX"] = results[results.Count - 1].ResultLog;

            // Switch back to general tab for more validations
            this.tab_General.Click();
            results.Add(this.ValidateData("CONSUMER", dataModel.CONSUMER, this.chkbx_CONSUMER, true, false));
            columnResult["CONSUMER"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("DEPARTMENT", dataModel.DEPARTMENT, this.txt_DEPARTMENT, false, true));
            columnResult["DEPARTMENT"] = results[results.Count - 1].ResultLog;

            // Switch to preferences tab for validations
            this.tab_Preference.Click();
            results.Add(this.ValidateData("COST_CTR", dataModel.COST_CTR, this.txt_COST_CTR, false, true));
            columnResult["COST_CTR"] = results[results.Count - 1].ResultLog;

            // Switch back to general tab for more validations
            this.tab_General.Click();
            results.Add(this.ValidateData("STOPFLAGDR", dataModel.STOPFLAGDR, this.chkbx_STOPFLAGDR, true, false));
            columnResult["STOPFLAGDR"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("REASONDR", dataModel.REASONDR, this.txt_REASONDR, false, true));
            columnResult["REASONDR"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("STOPFLAGCR", dataModel.STOPFLAGCR, this.chkbx_STOPFLAGCR, true, false));
            columnResult["STOPFLAGCR"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("REASONCR", dataModel.REASONCR, this.txt_REASONCR, false, true));
            columnResult["REASONCR"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("EFFECTIVE_DATE", dataModel.EFFECTIVE_DATE, this.txt_EFFECTIVE_DATE, false, true));
            columnResult["EFFECTIVE_DATE"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("ACCOUNT_OWNER_NAME", dataModel.ACCOUNT_OWNER_NAME, this.txt_ACCOUNT_OWNER_NAME, false, true));
            columnResult["ACCOUNT_OWNER_NAME"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("REC_STATUS", dataModel.REC_STATUS, this.txt_REC_STATUS, false, true));
            columnResult["REC_STATUS"] = results[results.Count - 1].ResultLog;

            results.Add(this.ValidateData("BOOKNG_ENT", dataModel.BOOKNG_ENT, this.txt_BOOKNG_ENT, false, true));
            columnResult["BOOKNG_ENT"] = results[results.Count - 1].ResultLog;

            // Validate the overall result
            columnResult["OVERALL_RESULT"] = results.All(r => r.IsMatched) ? "PASS" : "FAIL";

            // Update the result model with column result data
            foreach (var result in columnResult)
            {
                var property = res.GetType().GetProperty(result.Key);
                if (property != null && property.CanWrite)
                {
                    property.SetValue(res, result.Value);
                }
            }

            // Generate the Excel report
            GenerateExcelReport(rowNumber, dataModel, columnResult);
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Issue in Comparing Data: " + ex.Message);
    }
    finally
    {
        this.btn_CloseAccountWindow.FATClick();
    }
    return res;
}

private void GenerateExcelReport(int rowNumber, AccountDmvDataModel dataModel, Dictionary<string, string> columnResult)
{
    string filePath = @"C:\src\GPP_DMV\GPP\OutputFile.xlsx";

    try
    {
        // Ensure directory exists
        string directory = Path.GetDirectoryName(filePath);
        if (!Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        FileInfo fileInfo = new FileInfo(filePath);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        // Use the `using` statement to ensure proper disposal
        using (ExcelPackage package = new ExcelPackage(fileInfo))
        {
            ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Results");

            // Add headers if the worksheet is empty
            if (worksheet.Dimension == null)
            {
                worksheet.Cells[1, 1].Value = "Row Number";
                int columnIndex = 2;

                foreach (var field in columnResult.Keys)
                {
                    worksheet.Cells[1, columnIndex].Value = field + " - Expected";
                    worksheet.Cells[1, columnIndex + 1].Value = field + " - Actual";
                    worksheet.Cells[1, columnIndex + 2].Value = field + " - Result";
                    columnIndex += 3;
                }
            }

            // Find the next row to write data
            int nextRow = worksheet.Dimension?.End.Row + 1 ?? 2;
            worksheet.Cells[nextRow, 1].Value = rowNumber;

            // Populate row data
            int currentColumn = 2;
            foreach (var field in columnResult)
            {
                var fieldName = field.Key;
                var expectedValue = dataModel.GetType().GetProperty(fieldName)?.GetValue(dataModel, null)?.ToString() ?? "N/A";
                var actualValue = GetFieldValue(fieldName);
                var result = actualValue == expectedValue ? "PASS" : "FAIL";

                worksheet.Cells[nextRow, currentColumn].Value = expectedValue;
                worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue;
                worksheet.Cells[nextRow, currentColumn + 2].Value = result;
                currentColumn += 3;
            }

            // Save the Excel file
            package.Save();
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to generate Excel report: " + ex.Message);
    }
}

// Helper method to retrieve field values
private string GetFieldValue(string fieldName)
{
    switch (fieldName)
    {
        // Existing cases
        case "ACC_TYPE":
            return this.txt_ACC_TYPE.GetAttribute("value");
        case "ACC_NO":
            return this.txt_ACC_NO.GetAttribute("value");
        case "CUST_CODE":
            return this.txt_CUST_CODE.GetAttribute("value");
        case "CURRENCY":
            return this.txt_CURRENCY.GetAttribute("value");
        case "ACCOUNTNAME":
            return this.txt_ACCOUNTNAME.GetAttribute("value");
        // Additional fields from the new example:
        case "CDB_CHCK_DBT_IND":
            return this.chkbx_CDB_CHCK_DBT_IND.Selected ? "True" : "False";
        case "CDB_CHCK_CDT_IND":
            return this.chkbx_CDB_CHCK_CDT_IND.Selected ? "True" : "False";
        case "CATEGORY_LIST":
            return this.txt_CATEGORY_LIST.GetAttribute("value");
        case "DEBIT_CONVERSION":
            return this.chkbx_DEBIT_CONVERSION.Selected ? "True" : "False";
        case "CREDIT_CONVERSION":
            return this.chkbx_CREDIT_CONVERSION.Selected ? "True" : "False";
        case "EXT_AGREEMENT_IND":
            return this.chkbx_EXT_AGREEMENT_IND.Selected ? "True" : "False";
        case "EXT_AGREEMENT_START_DT":
            return this.txt_EXT_AGREEMENT_START_DT.GetAttribute("value");
        case "EXT_AGREEMENT_END_DT":
            return this.txt_EXT_AGREEMENT_END_DT.GetAttribute("value");
        case "BALANCE_AND_ACOUNT_IND":
            return this.chkbx_BALANCE_AND_ACOUNT_IND.Selected ? "True" : "False";
        case "COUNTRYCODE":
            return this.txt_COUNTRYCODE.GetAttribute("value");
        case "BRANCHCODE":
            return this.txt_BRANCHCODE.GetAttribute("value");
        case "ACC_SERVICING_INSTITUTION":
            return this.txt_ACC_SERVICING_INSTITUTION.GetAttribute("value");
        case "PROD_CAT_CODE":
            return this.txt_PROD_CAT_CODE.GetAttribute("value");

        // Default case
        default:
            return "Field not found";
    }
}
