 private void GenerateExcelReport(int rowNumber, AccountDmvDataModel dataModel, Dictionary<string, string> columnResult)
 {
     string workingDiectory = Directory.GetCurrentDirectory();

     //string filePath = @"C:\src\GPP_DMV\GPP\OutputFile.xlsx";
     string accountReports = Path.Combine(workingDiectory, "Accounts");

     try
     {
         // Ensure directory exists
         string directory = Path.GetDirectoryName(accountReports);
         if (!Directory.Exists(directory))
         {
             Directory.CreateDirectory(directory);
         }
         string filePath = Path.Combine(accountReports, "Account_OutputFile.xlsx");

         FileInfo fileInfo = new FileInfo(filePath);
         ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

         // Use the `using` statement to ensure proper disposal
         using (ExcelPackage package = new ExcelPackage(fileInfo))
         {
             // Load or create the worksheet
             ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Results");

             // Add headers if the worksheet is empty
             if (worksheet.Dimension == null)
             {
                 //worksheet.Cells[1, 1].Value = "Row Number";
                 int columnIndex = 1;

                 foreach (var field in columnResult.Keys)
                 {
                     // If the field is OVERALL_RESULT, only add a single column
                     if (field == "OVERALL_RESULT")
                     {
                         worksheet.Cells[1, columnIndex].Value = "OVERALL_RESULT";
                         columnIndex++;
                     }
                     else
                     {
                         worksheet.Cells[1, columnIndex].Value = field + " - ExcelFile";
                         worksheet.Cells[1, columnIndex + 1].Value = field + " - Accounts_UI";
                         columnIndex += 2;
                     }
                 }
             }

             // Find the next row to write data
             int nextRow = worksheet.Dimension?.End.Row + 1 ?? 2;
             worksheet.Cells[nextRow, 1].Value = rowNumber;

             // Populate row data
             int currentColumn = 1;
             foreach (var field in columnResult)
             {
                 var fieldName = field.Key;
                 var expectedValue = dataModel.GetType().GetProperty(fieldName)?.GetValue(dataModel, null)?.ToString() ?? "N/A";
                 var actualValue = GetFieldValue(fieldName, field.Value);

                 // If the field is OVERALL_RESULT, only write the actual value and skip expected
                 if (fieldName == "OVERALL_RESULT")
                 {
                     worksheet.Cells[nextRow, currentColumn].Value = actualValue;
                     currentColumn++;
                 }
                 else
                 {
                     worksheet.Cells[nextRow, currentColumn].Value = expectedValue;
                     worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue;
                     currentColumn += 2;
                 }
             }
             // Save the Excel file
             package.Save();
         }
     }
     catch (Exception ex)
     {
         Support.IsTrue(false, "Failed to generate Excel report: " + ex.Message);
     }
 }



public class AccountDmvDataModel
{
    public string ACC_TYPE { get; set; }
    public string ACC_NO { get; set; }
    public string CUST_CODE { get; set; }
    public string CURRENCY { get; set; }
    public string ACCOUNTNAME { get; set; }
    public string Address1 { get; set; }
    public string Address2 { get; set; }
    public string Address3 { get; set; }
    public string LOCATION { get; set; }
    public string NET_ADDR { get; set; }
    public string PHONE { get; set; }
    public string FAX { get; set; }
    public string CONSUMER { get; set; }
    public string DEPARTMENT { get; set; }
    public string COST_CTR { get; set; }
    public string STOPFLAGDR { get; set; }
    public string REASONDR { get; set; }
    public string STOPFLAGCR { get; set; }
    public string REASONCR { get; set; }
    public string EFFECTIVE_DATE { get; set; }
    public string ACCOUNT_OWNER_NAME { get; set; }
    public string REC_STATUS { get; set; }
    public string BOOKNG_ENT { get; set; }
    public string CDB_CHCK_DBT_IND { get; set; }
    public string CDB_CHCK_CDT_IND { get; set; }
    public string CATEGORY_LIST { get; set; }
    public string DEBIT_CONVERSION { get; set; }
    public string CREDIT_CONVERSION { get; set; }
    public string EXT_AGREEMENT_IND { get; set; }
    public string EXT_AGREEMENT_START_DT { get; set; }
    public string EXT_AGREEMENT_END_DT { get; set; }
    public string BALANCE_AND_ACOUNT_IND { get; set; }
    public string COUNTRYCODE { get; set; }
    public string BRANCHCODE { get; set; }
    public string ACC_SERVICING_INSTITUTION { get; set; }
    public string PROD_CAT_CODE { get; set; }
    public string IS_RECORD_EXIST { get; set; }
    public string OVERALL_RESULT { get; set; }
}
