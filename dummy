using AventStack.ExtentReports;
using AventStack.ExtentReports.Reporter;
using System;

class Program
{
    static ExtentReports extent;
    static ExtentTest test;
    static DateTime ActionStartTime;
    static class AutoConfig
    {
        public static bool CaptureScreenshotForEachAction = true; // Example config, adjust as needed
    }

    static void Main(string[] args)
    {
        var htmlReporter = new ExtentHtmlReporter("extentReport.html");
        extent = new ExtentReports();
        extent.AttachReporter(htmlReporter);

        test = extent.CreateTest("Sample Test");

        // Example call to verify international wire
        VerifyInternationalWire();
        
        extent.Flush();
    }

    static void VerifyInternationalWire()
    {
        Amount amount = null;
        SubmittedTemplateInformation TemplateInfo = new SubmittedTemplateInformation();
        BeneficiaryInformation beneficiaryInformation = null;

        try
        {
            Reports.TestDescription = "Verify International Wire.";
            LogStepDetails("Open Digital Bank Application", "Application", "Open", "Visibility", "Visible", "Visible", "pass", "");

            PageOperations.DBIQLoginPage.OpenBottomLine();
            LogStepDetails("Login to Digital Bank Application", "Login", "Enter", "Credentials", "Correct", "Correct", "pass", "");

            PageOperations.DBIQLoginPage.LoginToBottomLine(AutoConfig.BottomLineCompany_Name, AutoConfig.BottomLineUsr2_Name, AutoConfig.BottomLineUsr2_Pwd, AutoConfig.BottomLineUsr2_Key);
            LogStepDetails("Click on Transfers menu and Select Payment centre", "Menu", "Click", "Visibility", "Visible", "Visible", "pass", "");

            PageOperations.DBIQPaymentCenterPage.ClickOnTranferMenu();
            PageOperations.DBIQPaymentCenterPage.ClickOnPaymentCenter();
            LogStepDetails("Click on Add a new Template", "Button", "Click", "Visibility", "Visible", "Visible", "pass", "");

            PageOperations.DBIQPaymentCenterPage.ClickonAddaNewTemplate();
            LogStepDetails("Select Template Type", "Dropdown", "Select", "TemplateType", "InternationalWire", "InternationalWire", "pass", "");

            PageOperations.DBIQPaymentCenterPage.SelectATemplateType(TemplateType.InternationalWire);
            PageOperations.DBIQPaymentCenterPage.ClickOnContinueButton();
            LogStepDetails("Dataset is created and entered for Template Information", "Form", "Enter", "Data", "Valid", "Valid", "pass", "");

            TemplateInformation templateInformation = PageOperations.DBIQNewWireInternationalTemplatePage.CreateTemplateInformation();
            PageOperations.DBIQNewWireInternationalTemplatePage.SetTemplateInformation(templateInformation);
            LogStepDetails("Data is created and entered for Debit Account", "Form", "Enter", "Data", "Valid", "Valid", "pass", "");

            OriginatorInformation originatorInformation = PageOperations.DBIQNewWireInternationalTemplatePage.CreateOrginatorInformation();
            PageOperations.DBIQNewWireInternationalTemplatePage.SetOrginatorInformation(originatorInformation);
            LogStepDetails("Dataset is created and entered for Tax Payer Information", "Form", "Enter", "Data", "Valid", "Valid", "pass", "");

            BeneficiaryInformation taxPayerInformation = PageOperations.DBIQNewWireInternationalTemplatePage.CreateBeneficiaryInformation();
            PageOperations.DBIQNewWireInternationalTemplatePage.SetBeneficiaryInformation(taxPayerInformation, "International Wire");
            LogStepDetails("Create Intermediary Bank Information", "Form", "Create", "Data", "Valid", "Valid", "pass", "");

            IntermediaryBankInformation intermedbankinfo = PageOperations.DBIQNewWireInternationalTemplatePage.CrtIntermediaryBnkInfoForInternationalWireTmplt();
            LogStepDetails("Set Intermediary Bank Information", "Form", "Set", "Data", "Valid", "Valid", "pass", "");

            PageOperations.DBIQNewWireInternationalTemplatePage.SetIntermediaryBnkInfoForInternationalWireTmplt(intermedbankinfo);
            LogStepDetails("Data created and entered into Credit amount text box", "Textbox", "Enter", "Amount", "Valid", "Valid", "pass", "");

            amount = PageOperations.DBIQNewWireInternationalTemplatePage.CreateCreditAmt();
            PageOperations.DBIQNewWireInternationalTemplatePage.SetAmount(amount);
            TemplateInfo.Amount = amount.CreditAmount;
            TemplateInfo.BeneficiaryName = taxPayerInformation.Name;
            LogStepDetails("Verify New International wire template can be saved", "Button", "Click", "Visibility", "Visible", "Visible", "pass", "");

            PageOperations.DBIQNewWireInternationalTemplatePage.ClickOnSaveBtn();
        }
        catch (Exception ex)
        {
            FailTest(ex.Message);
        }
    }

    public static void LogStepDetails(string Control, string ControlType, string Method, string Property, string Value, string AValue, string Result, string Error)
    {
        string stepDetails = $"<table><tr>" +
                             $"<td>Control: {Control}</td>" +
                             $"<td>Type: {ControlType}</td>" +
                             $"<td>Action: {Method}</td>" +
                             $"<td>Property: {Property}</td>" +
                             $"<td>Exp. Value: {Value}</td>" +
                             $"<td>Act. Value: {AValue}</td>" +
                             $"<td>Result: {Result}</td>" +
                             $"<td>Error: {Error}</td></tr></table>";

        test.Log(Status.Info, stepDetails);

        if (AutoConfig.CaptureScreenshotForEachAction || Result == "fail")
        {
            string screenshotPath = CaptureImage();
            test.AddScreenCaptureFromPath(screenshotPath);
        }

        DateTime ActionStopTime = DateTime.Now;
        string stepTime = (ActionStopTime - ActionStartTime).TotalSeconds.ToString();
        test.Log(Status.Info, $"Time: {stepTime} seconds");
    }

    public static string CaptureImage()
    {
        // Implement screenshot capture logic here
        // Return the path to the captured screenshot
        return "screenshotPath";
    }

    public static void FailTest(string message)
    {
        test.Log(Status.Fail, message);
        extent.Flush();
        throw new Exception(message);
    }
}

public static string CaptureScreenshot()
{
    try
    {
        using (Bitmap bmp = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height))
        {
            using (Graphics g = Graphics.FromImage(bmp))
            {
                g.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size);
                using (MemoryStream ms = new MemoryStream())
                {
                    bmp.Save(ms, ImageFormat.Png);
                    byte[] imageArray = ms.ToArray();
                    return Convert.ToBase64String(imageArray);
                }
            }
        }
    }
    catch (Exception ex)
    {
        throw ex;
    }
}
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.markuputils.ExtentColor;

public class ExtentReportExample {
    private static ExtentReports extent;
    private static ExtentTest test;
    private static ExtentTest currentStep;

    public static void main(String[] args) {
        // Initialize the HtmlReporter
        ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter("extent.html");

        // Initialize ExtentReports and attach the HtmlReporter
        extent = new ExtentReports();
        extent.attachReporter(htmlReporter);

        // Create a test
        test = extent.createTest("My Test");

        // Log information under the same test step name
        logInfo("Step 1", "First line of information");
        logInfo("Step 1", "Second line of information");
        logInfo("Step 1", "Third line of information");

        // Log information under a different test step name
        logInfo("Step 2", "First line of information");
        logInfo("Step 2", "Second line of information");
        logInfo("Step 2", "Third line of information");

        // Finalize the report
        extent.flush();
    }

    private static void logInfo(String stepName, String info) {
        if (currentStep == null || !currentStep.getModel().getName().equals(stepName)) {
            currentStep = test.createNode(stepName);
        }
        currentStep.info(info);
    }
}

 public static ExtentTest CaptureScreenshot(IWebDriver webDriver)
 {
     try
     {
         //IWebDriver driver = new ChromeDriver();
         // Capture screenshot and convert to Base64 string
         ITakesScreenshot screenshotDriver =  webDriver as ITakesScreenshot;
         Screenshot screenshot = screenshotDriver.GetScreenshot();
         string base64Screenshot = screenshot.AsBase64EncodedString;

         // Log screenshot in Extent Report
         //ExtentTest test = ExtentTest.CreateNode("Screenshots");
         return currentStep.Log(Status.Fail, "Screenshot:", MediaEntityBuilder.CreateScreenCaptureFromBase64String(base64Screenshot).Build());
     }
     catch (Exception ex)
     {
         throw ex;
     }
 }
 public static void UpdateExtentLog(string Control, string ControlType, string Method, string Property, string Value, string AValue, string Result, string Error)
 {
     DateTime ActionStopTime = DateTime.Now;
     //DateTime stoptime = DateTime.Now;
     //DateTime ActionStopTime = DateTime.ParseExact(stoptime., "dd/MM/YYYY HH:mm:ss", CultureInfo.InvariantCulture);
     string stepTime = (ActionStopTime - ActionStartTime).TotalSeconds.ToString();
     string stepDetails;
                 
          stepDetails = $"<pre>" +
                              $"<b>Control</b>: {Control}<br>" +
                              $"<b>Type</b>: {ControlType}<br>" +
                              $"<b>Action</b>: {Method}<br>" +
                              $"<b>Property</b>: {Property}<br>" +
                              $"<b>Expected Value</b>: {Value}<br>" +
                              $"<b>Actual Value</b>: {AValue}<br>" +
                              $"<b>Result</b>: {Result}<br>" +
                              $"<b>Error</b>: {Error}<br> " +
                              $"<b>Time</b>: {stepTime}<br></pre>";
         if (Result != "fail")
         {
         
             ExtentManager.LogInfo(Status.Pass, TestStep, stepDetails);
         }
         else
         {                    
           ExtentTest extentManager = ExtentManager.CaptureScreenshot(FATrustDrivers.WebDriver);
            stepDetails = $"<pre>" +
                              $"<b>Control</b>: {Control}<br>" +
                              $"<b>Type</b>: {ControlType}<br>" +
                              $"<b>Action</b>: {Method}<br>" +
                              $"<b>Property</b>: {Property}<br>" +
                              $"<b>Expected Value</b>: {Value}<br>" +
                              $"<b>Actual Value</b>: {AValue}<br>" +
                              $"<b>Result</b>: {Result}<br>" +
                              $"<b>Error</b>: {Error}<br> " +
                              $"<b>Time</b>: {stepTime}<br>" +
                              $"<b>Screenshot</b>: {extentManager}<br></pre>";
             ExtentManager.LogInfo(Status.Fail, TestStep, stepDetails);
             //ExtentManager.CaptureScreenshot(FATrustDrivers.WebDriver);
         }

 [TestCleanup]
 public virtual void CleanupTest()
 {
     var testOutcome = Reports.EndTest(TestContext);
     ReportsBaseSetup.BaseAssemblyCleanup();
     if ((testOutcome.Status == UnitTestOutcome.Failed) && !testAlreadyFailed)
     {
         FailTest(testOutcome.Message);
     }
     else
     {
         // Close Windows Driver
         //FATrustDrivers.CloseWindowsDriver();
         //FATrustDrivers.QuitWindowsDriver();

         //// Close Web Driver
         //FATrustDrivers.CloseWebDriver();
         //FATrustDrivers.QuitWebDriver();
         Support.CloseAllProcessStartingWith("AcroRd"); //close all instances of Adobe Reader
     }
     Reports.PrintLog("------------------ Test Cleanup ------------------");
 }
