using AventStack.ExtentReports;
using AventStack.ExtentReports.Reporter;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System;

class Program
{
    static ExtentReports extent;
    static ExtentTest test;

    static void Main(string[] args)
    {
        // Initialize Extent Reports
        var htmlReporter = new ExtentHtmlReporter("extentReport.html");
        extent = new ExtentReports();
        extent.AttachReporter(htmlReporter);

        // Create a test instance
        test = extent.CreateTest("Sample Test");

        IWebDriver driver = null;
        
        try
        {
            driver = new ChromeDriver();

            // Example step
            UpdateDebugLog("ControlName", "Button", "Click", "Visibility", "Visible", "Visible", "pass", "");

            // Additional steps can be added here

        }
        catch (Exception ex)
        {
            test.Log(Status.Fail, $"Test failed with exception: {ex.Message}");
        }
        finally
        {
            driver?.Quit();
        }

        // Flush the report
        extent.Flush();
    }

    public static void UpdateDebugLog(string Control, string ControlType, string Method, string Property, string Value, string AValue, string Result, string Error)
    {
        test.Log(Status.Info, $"Control: {Control}");
        test.Log(Status.Info, $"ControlType: {ControlType}");
        test.Log(Status.Info, $"Method: {Method}");
        test.Log(Status.Info, $"Property: {Property}");
        test.Log(Status.Info, $"Value: {Value}");
        test.Log(Status.Info, $"AValue: {AValue}");
        test.Log(Status.Info, $"Result: {Result}");
        test.Log(Status.Info, $"Error: {Error}");

        if (AutoConfig.CaptureScreenshotForEachAction || Result == "fail")
        {
            string screenshotPath = CaptureImage();
            test.AddScreenCaptureFromPath(screenshotPath);
        }

        DateTime ActionStopTime = DateTime.Now;
        string stepTime = (ActionStopTime - ActionStartTime).TotalSeconds.ToString();
        test.Log(Status.Info, $"Step Time: {stepTime}");
    }

    public static string CaptureImage()
    {
        // Implement screenshot capture logic here
        // Return the path to the captured screenshot
        return "screenshotPath";
    }

    static DateTime ActionStartTime = DateTime.Now; // Example start time, adjust as needed
    static class AutoConfig
    {
        public static bool CaptureScreenshotForEachAction = true; // Example config, adjust as needed
    }
}
