public void GenerateExcelReport(List<AccountDmvDataModel> dataset, Dictionary<int, Dictionary<string, string>> accountDataDict)
{
    string workingDirectory = Directory.GetCurrentDirectory();
    string accountReports = Path.Combine(workingDirectory, "Accounts");

    try
    {
        // Ensure directory exists
        if (!Directory.Exists(accountReports))
        {
            Directory.CreateDirectory(accountReports);
        }

        string filePath = Path.Combine(accountReports, "Account_OutputFile.xlsx");
        FileInfo fileInfo = new FileInfo(filePath);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (ExcelPackage package = new ExcelPackage(fileInfo))
        {
            // Load or create the worksheet
            ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Results");

            // Add headers if the worksheet is empty
            if (worksheet.Dimension == null)
            {
                int columnIndex = 1;

                if (dataset != null && dataset.Count > 0)
                {
                    // Add headers based on AccountDmvDataModel properties
                    foreach (var field in dataset[0].GetType().GetProperties())
                    {
                        if (field.Name != "IS_RECORD_EXIST")
                        {
                            if (field.Name == "OVERALL_RESULT")
                            {
                                worksheet.Cells[1, columnIndex].Value = "OVERALL_RESULT";
                                columnIndex++;
                            }
                            else
                            {
                                worksheet.Cells[1, columnIndex].Value = field.Name + " - ExcelFile";
                                worksheet.Cells[1, columnIndex + 1].Value = field.Name + " - Accounts_UI";
                                columnIndex += 2;
                            }
                        }
                    }
                    worksheet.Cells[1, columnIndex].Value = "COMMENT";
                }
            }

            // Populate rows from the dataset and accountDataDict
            foreach (var entry in accountDataDict)
            {
                int rowNumber = entry.Key;
                Dictionary<string, string> result = entry.Value;
                AccountDmvDataModel dataModel = dataset[rowNumber];

                // Find the next row to write data
                int nextRow = worksheet.Dimension?.End.Row + 1 ?? 2;
                int currentColumn = 1;

                if (result.Count == 0) // Handle when account doesn't exist
                {
                    // Populate "Expected" values from dataModel and "N/A" for "Actual"
                    foreach (var prop in dataModel.GetType().GetProperties())
                    {
                        var expectedValue = prop.GetValue(dataModel, null)?.ToString() ?? "N/A";
                        var actualValue = "N/A";

                        if (prop.Name == "OVERALL_RESULT")
                        {
                            worksheet.Cells[nextRow, currentColumn].Value = "FAIL";
                            currentColumn++;
                        }
                        else if (prop.Name != "IS_RECORD_EXIST" && prop.Name != "OVERALL_RESULT")
                        {
                            worksheet.Cells[nextRow, currentColumn].Value = expectedValue;
                            worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue;
                            currentColumn += 2;
                        }
                    }
                    worksheet.Cells[nextRow, currentColumn].Value = "Data Missing"; // COMMENT
                }
                else // Handle when account exists
                {
                    foreach (var field in result)
                    {
                        foreach (var prop in dataModel.GetType().GetProperties())
                        {
                            string fieldName = prop.Name;
                            var expectedValue = dataModel?.GetType().GetProperty(fieldName)?.GetValue(dataModel, null)?.ToString();
                            var actualValue = field.Value;

                            // Handle date formatting if needed
                            if (fieldName == "EFFECTIVE_DATE")
                            {
                                expectedValue = FormatDate(expectedValue);
                                actualValue = FormatDate(actualValue);
                            }

                            if (fieldName == "OVERALL_RESULT")
                            {
                                worksheet.Cells[nextRow, currentColumn].Value = actualValue;
                                currentColumn++;
                            }
                            else
                            {
                                worksheet.Cells[nextRow, currentColumn].Value = expectedValue;
                                worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue;
                                currentColumn += 2;
                            }
                        }
                    }
                }
            }

            // Save the Excel file
            package.Save();
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to generate Excel report: " + ex.Message);
    }
}

// Utility function to format date strings
private string FormatDate(string dateValue)
{
    if (DateTime.TryParse(dateValue, out DateTime parsedDate))
    {
        return parsedDate.ToString("MM/dd/yyyy");
    }
    return dateValue;
}
