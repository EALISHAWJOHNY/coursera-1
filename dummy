def handle_file_uploads(sourcefile, targetfile):
    """
    Handle saving uploaded files to the correct locations.
    """
    fs_source = FileSystemStorage(location='Accounts/data/input_data/source')
    fs_target = FileSystemStorage(location='Accounts/data/input_data/target')

    # Save files to the specified locations
    source_path = fs_source.save(sourcefile.name, sourcefile)
    target_path = fs_target.save(targetfile.name, targetfile)

    logger.info(f"Saved source file at: {source_path}")
    logger.info(f"Saved target file at: {target_path}")

    return source_path, target_path

@csrf_exempt
def upload_files(request):
    try:
        if request.method == 'POST' and 'sourcefile' in request.FILES and 'targetfile' in request.FILES:
            sourcefile = request.FILES['sourcefile']
            targetfile = request.FILES['targetfile']

            # Handle the file uploads
            handle_file_uploads(sourcefile, targetfile)

            # Call the processing script
            try:
                main()
                # Return the response with download URLs
                return JsonResponse({
                    'message': 'Files processed successfully!',
                    'skipped_url': '/accounts/download_skipped/',
                    'source_url': '/accounts/download_source/',
                    'final_report_url': '/accounts/download_final_report/'
                })

            except subprocess.CalledProcessError as e:
                logger.error(f"Subprocess error: {str(e)}")
                return JsonResponse({'message': f'Error in processing files: {str(e)}'}, status=500)

            except Exception as e:
                logger.error(f"Unexpected error in subprocess: {str(e)}")
                return JsonResponse({'message': f'Unexpected error: {str(e)}'}, status=500)
        
        else:
            logger.warning("POST request does not contain required files.")
            return JsonResponse({'message': 'Failed to upload files.'}, status=400)

    except Exception as e:
        logger.error(f"Unexpected error in upload_files view: {str(e)}")
        return JsonResponse({'message': f'Server encountered an error: {str(e)}'}, status=500)

def download_skipped(request):
    file_path = os.path.join(settings.BASE_DIR, 'Accounts/data/output_data/Skipped-Records.csv')
    return FileResponse(open(file_path, 'rb'), as_attachment=True, filename='Skipped-Records.csv')

def download_source(request):
    file_path = os.path.join(settings.BASE_DIR, 'Accounts/data/output_data/SRC_Accounts.dsv')
    return FileResponse(open(file_path, 'rb'), as_attachment=True, filename='SRC_Accounts.dsv')

def download_final_report(request):
    file_path = os.path.join(settings.BASE_DIR, 'Accounts/data/output_data/Final-Report.xlsx')
    return FileResponse(open(file_path, 'rb'), as_attachment=True, filename='Final-Report.xlsx')

def main():
