public Dictionary<string, string> ValidateAndCaptureScreenshots(DataModel dataModel)
{
    var columnResult = new Dictionary<string, string>();
    var results = new List<ValidationResult>();
    
    try
    {
        // Create a temporary folder to store screenshots
        string tempFolder = Path.Combine(Directory.GetCurrentDirectory(), "TempScreenshots", dataModel.ACC_NO);
        if (!Directory.Exists(tempFolder))
        {
            Directory.CreateDirectory(tempFolder);
        }

        // Navigate and validate each tab, capturing screenshots and storing them temporarily
        results.Add(this.ValidateData("COUNTRYCODE", dataModel.COUNTRYCODE, txt_COUNTRYCODE, false, true));
        columnResult["COUNTRYCODE"] = results[results.Count - 1].ResultLog;
        this.CaptureScreenshotTemp(tempFolder, dataModel.ACC_NO, "COUNTRYCODE");

        results.Add(this.ValidateData("BRANCHCODE", dataModel.BRANCHCODE, txt_BRANCHCODE, false, true));
        columnResult["BRANCHCODE"] = results[results.Count - 1].ResultLog;
        this.CaptureScreenshotTemp(tempFolder, dataModel.ACC_NO, "BRANCHCODE");

        this.tab_Preference.Click();
        results.Add(this.ValidateData("ACC_SERVICING_INSTITUTION", dataModel.ACC_SERVICING_INSTITUTION, txt_ACC_SERVICING_INSTITUTION, false, true));
        columnResult["ACC_SERVICING_INSTITUTION"] = results[results.Count - 1].ResultLog;
        this.CaptureScreenshotTemp(tempFolder, dataModel.ACC_NO, "ACC_SERVICING_INSTITUTION");

        results.Add(this.ValidateData("PROD_CAT_CODE", dataModel.PROD_CAT_CODE, txt_PROD_CAT_CODE, false, true));
        columnResult["PROD_CAT_CODE"] = results[results.Count - 1].ResultLog;
        this.CaptureScreenshotTemp(tempFolder, dataModel.ACC_NO, "PROD_CAT_CODE");

        // Determine the overall result
        columnResult["OVERALL_RESULT"] = (results.All(items => items.IsMatched)) ? "PASS" : "FAIL";

        // Check if all values are "N/A" and add comments accordingly
        bool allValuesNA = columnResult.All(items => items.Value == "N/A");
        if (allValuesNA)
        {
            columnResult["Comments"] = "Data missing;";
        }

        // Ensure "Comments" key exists in columnResult
        if (!columnResult.ContainsKey("Comments"))
        {
            columnResult.Add("Comments", "");
        }

        // Move all screenshots from the temporary folder to either "Pass" or "Fail" folder based on the overall result
        MoveScreenshots(tempFolder, dataModel.ACC_NO, columnResult["OVERALL_RESULT"]);
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Issue in Comparing Data: " + ex.Message);
    }
    finally
    {
        // Ensure temporary files are cleaned up if needed
    }
    return columnResult;
}

public void CaptureScreenshotTemp(string tempFolder, string accountNo, string tabName)
{
    try
    {
        // Capture screenshot and save it to a temporary folder
        Screenshot screenshot = ((ITakesScreenshot)FATrustDrivers.WebDriver).GetScreenshot();
        string screenshotFilePath = Path.Combine(tempFolder, $"{accountNo}_{tabName}.png");
        screenshot.SaveAsFile(screenshotFilePath, ScreenshotImageFormat.Png);
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to capture screenshot for " + tabName + ": " + ex.Message);
    }
}

public void MoveScreenshots(string tempFolder, string accountNo, string overallResult)
{
    try
    {
        // Determine the destination folder based on the overall result
        string testReportFolder = Path.Combine(Directory.GetCurrentDirectory(), "TestReports");
        string accountFolder = Path.Combine(testReportFolder, overallResult == "PASS" ? "Pass" : "Fail", accountNo);

        // Create the destination folder if it doesn't exist
        if (!Directory.Exists(accountFolder))
        {
            Directory.CreateDirectory(accountFolder);
        }

        // Move screenshots from the temporary folder to the destination folder
        foreach (string screenshotFile in Directory.GetFiles(tempFolder))
        {
            string fileName = Path.GetFileName(screenshotFile);
            string destFile = Path.Combine(accountFolder, fileName);
            File.Move(screenshotFile, destFile);
        }

        // Optionally delete the temporary folder after moving files
        Directory.Delete(tempFolder, true);
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to move screenshots: " + ex.Message);
    }
}
