public void GenerateExcelReport(int rowNumber, AccountDmvDataModel dataModel, List<AccountDmvDataModel> columnResult)
{
    string workingDiectory = Directory.GetCurrentDirectory();
    string accountReports = Path.Combine(workingDiectory, "Accounts");

    try
    {
        // Ensure directory exists
        string directory = Path.Combine(accountReports);
        if (!Directory.Exists(accountReports))
        {
            Directory.CreateDirectory(accountReports);
        }
        string filePath = Path.Combine(accountReports, "Account_OutputFile.xlsx");

        FileInfo fileInfo = new FileInfo(filePath);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        // Use the `using` statement to ensure proper disposal
        using (ExcelPackage package = new ExcelPackage(fileInfo))
        {
            // Load or create the worksheet
            ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Results");

            // Add headers if the worksheet is empty
            if (worksheet.Dimension == null)
            {
                int columnIndex = 1;
                if (dataModel != null)
                {

                    // Add headers based on columnResult
                    foreach (var field in dataModel.GetType().GetProperties())
                    {
                        if (field.Name != "IS_RECORD_EXIST")
                        {
                            if (field.Name == "OVERALL_RESULT")
                            {
                                worksheet.Cells[1, columnIndex].Value = "OVERALL_RESULT";
                                columnIndex++;
                            }
                            else
                            {
                                worksheet.Cells[1, columnIndex].Value = field.Name + " - ExcelFile";
                                worksheet.Cells[1, columnIndex + 1].Value = field.Name + " - Accounts_UI";
                                columnIndex += 2;
                            }
                        }
                    }
                    worksheet.Cells[1, columnIndex++].Value = "COMMENT";
                }
            }

            // Find the next row to write data
            int nextRow = worksheet.Dimension?.End.Row + 1 ?? 2;

            // Populate row data                    
            int currentColumn = 1;

            // If columnResult is null, populate row with dataModel values as expected, and "N/A" as actual
            if (columnResult == null && dataModel != null)
            {
                // Populate "Expected" values from dataModel and "Actual" values as "N/A"
                foreach (var prop in dataModel.GetType().GetProperties())
                {
                    var expectedValue = prop.GetValue(dataModel, null)?.ToString() ?? "N/A"; // Expected value from dataModel
                    var actualValue = "N/A"; // Actual value is always N/A since data is missing

                    if (prop.Name == "OVERALL_RESULT")
                    {
                        worksheet.Cells[nextRow, currentColumn].Value = "FAIL";
                        currentColumn++;
                    }
                    else
                    {
                        if (prop.Name != "IS_RECORD_EXIST" && prop.Name != "OVERALL_RESULT")
                        {
                            worksheet.Cells[nextRow, currentColumn].Value = expectedValue;  // Expected value
                            worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue; // Actual value as N/A
                            currentColumn += 2;
                        }
                    }
                }

                // Add comment 
                worksheet.Cells[nextRow, currentColumn++].Value = "Data Missing"; // COMMENT


            }
            else if (columnResult != null)
            {
                // Populate row with columnResult values when available
                foreach (var field in columnResult)
                {
                    foreach (var prop in field.GetType().GetProperties())
                    {
                        var fieldName = prop.Name;
                        var expectedValue = dataModel?.GetType().GetProperty(fieldName)?.GetValue(dataModel, null)?.ToString();
                        var actualValue = GetFieldValue(fieldName, field.Value);

                        // Handle date formatting if needed
                        if (fieldName == "EFFECTIVE_DATE")
                        {
                            if (DateTime.TryParse(expectedValue, out DateTime expectedDate))
                            {
                                expectedValue = expectedDate.ToString("MM/dd/yyyy");
                            }
                            if (DateTime.TryParse(actualValue, out DateTime actualDate))
                            {
                                actualValue = actualDate.ToString("MM/dd/yyyy");
                            }
                        }
                        if (fieldName == "OVERALL_RESULT")
                        {
                            string accountNo = dataModel.ACC_NO;
                            if (actualValue == "FAIL")
                            {

                                worksheet.Cells[nextRow, currentColumn].Value = actualValue;
                                currentColumn++;
                            }
                            else
                            {
                                worksheet.Cells[nextRow, currentColumn].Value = actualValue;
                                currentColumn++;
                            }
                            //CaptureScreenshot(accountNo);
                        }
                        else
                        {
                            worksheet.Cells[nextRow, currentColumn].Value = expectedValue;
                            worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue;
                            currentColumn += 2;
                        }
                    }
                }
            }
            // Save the Excel file
            package.Save();
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to generate Excel report: " + ex.Message);
    }
}
