import os
from .path_helper import resource_path  # Assuming resource_path is used to handle relative paths

# Define base directory
BASE_DIR = os.getcwd()  # Current directory where this script is located

# List of all file paths
file_paths = [
    os.path.join(BASE_DIR, "log_files", "accounts.log"),
    os.path.join(BASE_DIR, "Accounts", "data", "input_data", "source", "accountsource.json"),
    os.path.join(BASE_DIR, "Accounts", "data", "output_data", "Skipped-Records.csv"),
    os.path.join(BASE_DIR, "Accounts", "data", "output_data", "SRC_Accounts.dsv"),
    os.path.join(BASE_DIR, "Accounts", "data", "input_data", "target", "Target Data Extract - Accounts 3.19 - Copy.dsv"),
    os.path.join(BASE_DIR, "Accounts", "data", "output_data", "Final-Report.xlsx"),
    os.path.join(BASE_DIR, "log_files", "synonyms.log"),
    os.path.join(BASE_DIR, "Synonyms", "data", "input_data", "source", "synonyms.dsv"),
    os.path.join(BASE_DIR, "Synonyms", "data", "output_data", "SYNONYM-SOURCE.dsv"),
    os.path.join(BASE_DIR, "Synonyms", "data", "input_data", "target", "FAT PROD in UAT account_alias.dsv"),
    os.path.join(BASE_DIR, "Synonyms", "data", "output_data", "FINAL-SYNONYM-REPORT.xlsx"),
    os.path.join(BASE_DIR, "log_files", "standing_orders.log"),
    os.path.join(BASE_DIR, "standing_orders", "data", "input_data", "source", "Schedulers_to_be_migrated_combined.xlsx"),
    os.path.join(BASE_DIR, "standing_orders", "data", "output_data", "Mapped_Standing_Order_Report.xlsx"),
    os.path.join(BASE_DIR, "standing_orders", "data", "input_data", "target", "FAT PROD in UAT STANDING_ORDERS.dsv"),
    os.path.join(BASE_DIR, "standing_orders", "data", "output_data", "Final_Standing_Order_Report.xlsx"),
    os.path.join(BASE_DIR, "standing_orders", "data", "input_data", "source_before_merge", "Schedulers to be migrated - Apr'24 (Incl & Excl).xlsx"),
    os.path.join(BASE_DIR, "log_files", "templates.log"),
    os.path.join(BASE_DIR, "templates", "data", "input_data", "source", "templates_combined.xlsx"),
    os.path.join(BASE_DIR, "templates", "data", "output_data", "Mapped_Templates_Report.xlsx"),
    os.path.join(BASE_DIR, "templates", "data", "input_data", "target", "target_template.xlsx"),
    os.path.join(BASE_DIR, "templates", "data", "output_data", "Final_Templates_Report.xlsx"),
    os.path.join(BASE_DIR, "templates", "data", "input_data", "source_before_merge", "Templates_to_be_migrated_Latest.xlsx")
]

# Function to ensure all directories exist
def ensure_directories_exist(paths):
    for file_path in paths:
        dir_path = os.path.dirname(file_path)  # Get the directory part of the path
        if not os.path.exists(dir_path):  # Check if the directory exists
            os.makedirs(dir_path)  # Create the directory if it doesn't exist
            print(f"Created directory: {dir_path}")
        else:
            print(f"Directory already exists: {dir_path}")

# Ensure directories exist
ensure_directories_exist(file_paths)
