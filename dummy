public void GenerateExcelReport(int rowNumber, AccountDmvDataModel dataModel, Dictionary<string, string> columnResult)
{
    string workingDirectory = Directory.GetCurrentDirectory();
    string accountReports = Path.Combine(workingDirectory, "Accounts");

    try
    {
        // Ensure directory exists
        if (!Directory.Exists(accountReports))
        {
            Directory.CreateDirectory(accountReports);
        }

        string filePath = Path.Combine(accountReports, "Account_OutputFile.xlsx");
        FileInfo fileInfo = new FileInfo(filePath);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (ExcelPackage package = new ExcelPackage(fileInfo))
        {
            // Load or create the worksheet
            ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Results");

            // Add headers if the worksheet is empty
            if (worksheet.Dimension == null)
            {
                int columnIndex = 1;

                // If columnResult is null, generate headers based on dataModel properties
                if (dataModel != null)
                {
                    foreach (var prop in dataModel.GetType().GetProperties())
                    {
                        worksheet.Cells[1, columnIndex].Value = prop.Name + " - Expected";
                        worksheet.Cells[1, columnIndex + 1].Value = prop.Name + " - Actual";
                        columnIndex += 2;
                    }

                    worksheet.Cells[1, columnIndex++].Value = "COMMENT";      // Add comment column
                    worksheet.Cells[1, columnIndex].Value = "OVERALL_RESULT"; // Add overall result column
                }
            }

            // Find the next row to write data
            int nextRow = worksheet.Dimension?.End.Row + 1 ?? 2;
            int currentColumn = 1;

            // If columnResult is null, populate row with dataModel values as expected, and "N/A" as actual
            if (columnResult == null && dataModel != null)
            {
                // Populate "Expected" values from dataModel and "Actual" values as "N/A"
                foreach (var prop in dataModel.GetType().GetProperties())
                {
                    var expectedValue = prop.GetValue(dataModel, null)?.ToString() ?? "N/A"; // Expected value from dataModel
                    var actualValue = "N/A"; // Actual value is always N/A since data is missing

                    worksheet.Cells[nextRow, currentColumn].Value = expectedValue;  // Expected value
                    worksheet.Cells[nextRow, currentColumn + 1].Value = actualValue; // Actual value as N/A
                    currentColumn += 2;
                }

                // Add comment and overall result
                worksheet.Cells[nextRow, currentColumn++].Value = "Data Missing"; // COMMENT
                worksheet.Cells[nextRow, currentColumn].Value = "FAIL"; // OVERALL_RESULT
            }
            else if (columnResult != null)
            {
                // Populate row with columnResult values when available (previous logic)
                foreach (var field in columnResult)
                {
                    var fieldName = field.Key;
                    var expectedValue = dataModel?.GetType().GetProperty(fieldName)?.GetValue(dataModel, null)?.ToString() ?? "N/A";
                    var actualValue = field.Value ?? "N/A";

                    // Handle date formatting if needed
                    if (fieldName == "EFFECTIVE_DATE")
                    {
                        if (DateTime.TryParse(expectedValue, out DateTime expectedDate))
                        {
                            expectedValue = expectedDate.ToString("MM/dd/yyyy");
                        }
                        if (DateTime.TryParse(actualValue, out DateTime actualDate))
                        {
                            actualValue = actualDate.ToString("MM/dd/yyyy");
                        }
                    }

                    // Write the values to the Excel file
                    worksheet.Cells[nextRow, currentColumn++].Value = expectedValue;
                    worksheet.Cells[nextRow, currentColumn++].Value = actualValue;
                }

                // Add comment and overall result columns
                worksheet.Cells[nextRow, currentColumn++].Value = "Data Verified";
                worksheet.Cells[nextRow, currentColumn].Value = "PASS";
            }

            // Save the Excel file
            package.Save();
        }
    }
    catch (Exception ex)
    {
        Support.IsTrue(false, "Failed to generate Excel report: " + ex.Message);
    }
}
